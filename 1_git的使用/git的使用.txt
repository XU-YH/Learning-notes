
	//通过git init命令把这个目录变成Git可以管理的仓库
$ git init
	//仓库的当前状态
$ git status
	//如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
$ git remote add origin git@github.com:XU-YH/(项目名).git
$ git pull --rebase origin master
$ git add readme.txt
$ git commit -m "add distributed"
	$ git pull	
$ git push origin branch-name

版本回退：
		//显示从最近到最远的提交日志
	$ git log
		//看到的一大串类似3628164...882e1e0的是commit_id（版本号）（十六进制）
		//简化信息
	$ git log --pretty=oneline
		//回退到上一个版本
	$ git reset --hard HEAD^		
		//指定回到某个版本，根据版本号找，版本号没必要写全，前几位就可以了
		//HEAD指向哪个版本号，你就把当前版本定位在哪
	$ git reset --hard commit_id
		//查看命令历史，以便确定要回到哪个版本
	$ git reflog
	
工作区和暂存区：

管理修改：Git管理的是修改

撤销修改：	
	文件已修改，未add到暂存区:
	git checkout -- file可还原，让这个文件回到最近一次git commit或git add时的状态

	文件已修改，并add到暂存区未commit：
	git reset HEAD file 
	git checkout -- file可还原
	
	文件已修改，并add到暂存区且commit--版本回退吧
	
删除文件：
		//rm命令删除文件
	$ rm test.txt
		//删除版本库里的文件
	$ git rm test.txt
		//删错了文件，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本
	$ git checkout -- test.txt
		//git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
		
创建与合并分支：
	在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。
	截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，
	而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

	查看分支：git branch
		（当前分支前面会标一个*号）
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
	
解决冲突：
	master分支和feature1分支各自都分别有新的提交，这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突
	$ git merge feature1
		存在冲突，必须手动解决冲突后再提交

分支管理策略：
	通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
	如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
	
	$ git checkout -b dev
		//修改readme.txt文件
	$ git add readme.txt
	$ git commit -m "add merge"
	$ git checkout master
		//合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
	$ git merge --no-ff -m "merge with no-ff" dev		
	
Bug分支：
	软件开发中，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	
		（新文件修改后，要先add到stage中，然后再stash)
	$ git stash
	$ git checkout master
	现在就可以去修改Bug了
	改好了
	$ git checkout dev
		$ git stash list（查看）
		Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
			一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
			另一种方式是用git stash pop，恢复的同时把stash内容也删了
	$ git stash pop
	
Feature分支:
	开发一个新feature(实验性质的代码)，最好新建一个分支；
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除,
	如果分支中没有添加新的数据（空的文件）是可以通过git branch -d <name>删除
	
多人协作：
	A：首先，可以试图用git push origin branch-name推送自己的修改；
	B：如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	C：如果合并有冲突，则解决冲突，并在本地提交；
	D：没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
	E：如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
		用命令$ git branch --set-upstream-to=origin/branch-name。
	
	查看远程库信息，使用git remote -v；
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，
	于是他用这个命令创建本地dev分支：$ git checkout -b branch-name origin/branch-name

	https://blog.csdn.net/fox9916/article/details/78253714?locationNum=5&fps=1

	https://blog.csdn.net/lindexi_gd/article/details/52554159