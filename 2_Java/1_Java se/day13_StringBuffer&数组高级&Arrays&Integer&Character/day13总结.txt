1:StringBuffer(掌握)
	(1)用字符串做拼接，比较耗时并且也耗内存，而这种拼接操作又是比较常见的，为了解决这个问题，Java就提供了
	   一个字符串缓冲区类。StringBuffer供我们使用。
	(2)StringBuffer的构造方法
		A:public StringBuffer():无参构造方法
		B:public StringBuffer(int capacity):指定容量的字符串缓冲区对象
		C:public StringBuffer(String str):指定字符串内容的字符串缓冲区对象
	(3)StringBuffer的方法：
 		public int capacity()：返回当前容量。	理论值
 		public int length():返回长度（字符数）。 实际值
	(4)StringBuffer的常见功能(自己补齐方法的声明和方法的解释)
		A:添加功能
			 public StringBuffer append(String str):可以把任意类型数据添加到字符串缓冲区里面,并返回字符串缓冲区本身
			 public StringBuffer insert(int offset,String      str):在指定位置把任意类型的数据插入到字符串缓冲区里面,并返回字符串缓冲区本身
		B:删除功能
			public StringBuffer deleteCharAt(int index):删除指定位置的字符，并返回本身
			public StringBuffer delete(int start,int end):删除从指定位置开始指定位置结束的内容，并返回本身
		C:替换功能
			public StringBuffer replace(int start,int end,String str):从start开始到end用str替换
		D:反转功能
			public StringBuffer reverse()
		E:截取功能(注意这个返回值)
			public String substring(int start)
			public String substring(int start,int end)
	(5)StringBuffer的练习(做一遍)
		A:String和StringBuffer相互转换
			String -- StringBuffer
				构造方法
				StringBuffer ss = new StringBuffer(s);
			StringBuffer -- String
				toString()方法
				String s = ss.toString();
		B:字符串的拼接
		C:把字符串反转
		D:判断一个字符串是否对称
	(6)面试题
		小细节：
			StringBuffer：同步的，数据安全，效率低。
			StringBuilder：不同步的，数据不安全，效率高。
		A:String,StringBuffer,StringBuilder的区别
			String内容不可变，而StringBuffer和StringBuilder内容可变
		B:StringBuffer和数组的区别?
			二者都可以看作是一个容器，装其他数据。但是，StringBuffer的数据最终是一个字符串，而数组可以放置多种数据，但必须是同一种数据类型。
	(7)注意的问题：
		String作为形式参数，效果和基本类型作为参数传递是一样的
		StringBuffer作为形式参数。
			StringBuffer sb1 = new StringBuffer("hello");
			StringBuffer sb2 = new StringBuffer("world");
			change(sb1, sb2);
			System.out.println(sb1 + "---" + sb2);// hello---worldworld

			public static void change(StringBuffer sb1, StringBuffer sb2){
				sb1 = sb2;
				sb2.append(sb1);
			}
			append()更改其值
2:数组高级以及Arrays(掌握)
	(1)排序
		A:冒泡排序
			相邻元素两两比较，大的往后放，第一次完毕，最大值出现在了最大索引处。同理，其他的元素就可以排好。
			
			public static void bubbleSort(int[] arr) {
				for(int x=0; x<arr.length-1; x++) {
					for(int y=0; y<arr.length-1-x; y++) {
						if(arr[y] > arr[y+1]) {
							int temp = arr[y];
							arr[y] = arr[y+1];
							arr[y+1] = temp;
						}
					}
				}
			}
			
		B:选择排序
			把0索引的元素，和索引1以后的元素都进行比较，第一次完毕，找出最小值索引，与0索引交换。同理，其他的元素就可以排好。
			
			public static void selectSort(int[] arr) {
				for(int x=0; x<arr.length-1; x++) {
					int minIndex = x;
					for(int y=x+1; y<arr.length; y++) {
						if(arr[minIndex] > arr[y]){
							minIndex = y;
						}
					}
					if(minIndex != x) {
						int temp = arr[minIndex];
						arr[minIndex] = arr[x];
						arr[x] = temp;
					}
				}
			}
	(2)查找
		A:基本查找
			针对数组无序的情况
			
			public static int getIndex(int[] arr,int value) {
				int index = -1;
				
				for(int x=0; x<arr.length; x++) {
					if(arr[x] == value) {
						index = x;
						break;
					}
				}
				
				return index;
			}
		B:二分查找(折半查找)
			针对数组有序的情况(千万不要先排序，在查找)
			
			public static int binarySearch(int[] arr,int value) {
				int min = 0;
				int max = arr.length-1;
				int mid = (min+max)/2;
				
				while(arr[mid] != value) {
					if(arr[mid] > value) {
						max = mid - 1;
					}else if(arr[mid] < value) {
						min = mid + 1;
					}
					
					if(min > max) {
						return -1;
					}
					
					mid = (min+max)/2;
				}
				
				return mid;
			}
	(3)Arrays工具类
		A:是针对数组进行操 作的工具类。包括排序和查找等功能。
		B:要掌握的方法(自己补齐方法)
			把数组转成字符串：public static String toString(int[] a)
			排序：public static void sort(int[] a)
			二分查找：public static int binarySearch(int[] a,int key)
	(4)Arrays工具类的源码解析
	(5)把字符串中的字符进行排序
		举例：
			"edacbgf"
			得到结果
			"abcdefg"

3:Integer(掌握)
	(1)为了让基本类型的数据进行更多的操作，Java就为每种基本类型提供了对应的包装类类型
		byte 		Byte
		short		Short
		int			Integer
		long		Long
		float		Float
		double		Double
		char		Character
		boolean		Boolean
	(2)Integer的构造方法
		A:Integer i = new Integer(100);
		B:Integer i = new Integer("100");
			注意：这里的字符串必须是由数字字符组成
	(3)String和int的相互转换
		A:String -- int
			Integer.parseInt("100");
		B:int -- String
			String.valueOf(100);
	(4)其他的功能(了解)
		进制转换
			常用的基本进制转换
				public static String toBinaryString(int i)
				public static String toOctalString(int i)
				public static String toHexString(int i)
					//Integer.toBinaryString(100)
			  
			十进制到其他进制
				public static String toString(int i,int radix)
					//Integer.toString(100, 2)
			由这个我们也看到了进制的范围：2-36
			为什么呢?0,...9,a...z
			 
			其他进制到十进制
				public static int parseInt(String s,int radix)
					//Integer.parseInt("100", 2
	(5)JDK5的新特性
		自动装箱	基本类型--引用类型
		自动拆箱	引用类型--基本类型
		
		把下面的这个代码理解即可：
			Integer i = 100;
			i += 200;
				Integer ii = Integer.valueOf(100); //自动装箱
				ii = Integer.valueOf(ii.intValue() + 200); //自动拆箱，再自动装箱
				System.out.println((new StringBuilder("ii:")).append(ii).toString());
	(6)面试题
		-128到127之间的数据缓冲池问题
		针对-128到127之间的数据，做了一个数据缓冲池，
		如果数据是该范围内的，每次并不创建新的空间
		如果在-128到127之间，会直接从缓冲池里获取数据

4:Character(了解)
	(1)Character构造方法	
		Character ch = new Character('a');
	(2)要掌握的方法：(自己补齐)
		public static boolean isUpperCase(char ch):判断给定的字符是否是大写字符
 		public static boolean isLowerCase(char ch):判断给定的字符是否是小写字符
 		public static boolean isDigit(char ch):判断给定的字符是否是数字字符
 		public static char toUpperCase(char ch):把给定的字符转换为大写字符
		public static char toLowerCase(char ch):把给定的字符转换为小写字符
	(3)案例：
		统计字符串中大写，小写及数字字符出现的次数