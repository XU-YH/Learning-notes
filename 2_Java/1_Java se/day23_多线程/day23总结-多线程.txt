1:多线程(理解)
	(1)多线程：一个应用程序有多条执行路径
		进程：正在执行的应用程序
		线程：进程的执行单元，执行路径
		单线程：一个应用程序只有一条执行路径
		多线程：一个应用程序有多条执行路径
		
		多进程的意义?
			提高CPU的使用率
		多线程的意义?
			提高应用程序的使用率
	(2)Java程序的运行原理及JVM的启动是多线程的吗?
		A:Java命令去启动JVM，JVM会启动一个进程，该进程会启动一个主线程。
		B:JVM的启动是多线程的，因为它最低有两个线程启动了，主线程和垃圾回收线程。
	(3)多线程   的实现方案(自己补齐步骤及代码	掌握)
		A:继承Thread类
			a:自定义类MyThread继承Thread类。
			b:MyThread类里面重写run()?
			c:创建对象
				MyThread my = new MyThread();
			d:启动线程
				my.start();
		B:实现Runnable接口
			a:自定义类MyRunnable实现Runnable接口
			b:重写run()方法
			c:创建MyRunnable类的对象
				MyRunnable my = new MyRunnable();
			d:创建Thread类的对象，并把C步骤的对象作为构造参数传递
				Thread t = new Thread(my, "林青霞");
			e:启动线程
				t.start();
	(4)线程的名称和当前线程  
		public final String getName():			获取线程的名称。
		public final void setName(String name):	设置线程的名称
		public static Thread currentThread():	返回当前正在执行的线程对象
			Thread.currentThread().getName()		
	(5)线程的调度和优先级问题
		A:线程的调度
			a:分时调度
			b:抢占式调度 (Java采用的是该调度方式)
		B:获取和设置线程优先级
			a:默认是5
			b:范围是1-10
		如何获取线程对象的优先级?
			public final int getPriority():返回线程对象的优先级
		如何设置线程对象的优先级呢?
			public final void setPriority(int newPriority)：更改线程的优先级。 
		线程优先级高仅仅表示线程获取的 CPU时间片的几率高，但是要在次数比较多，或者多次运行的时候才能看到比较好的效果。
	(6)线程的控制(常见方法)
		A:休眠线程：public static void sleep(long millis)
						Thread.sleep(1000);//线程睡一秒
		B:加入线程：public final void join():等待该线程终止，其它线程才能继续。
		C:礼让线程：public static void yield()
					暂停当前正在执行的线程对象，并执行其他线程。 
					在一定程度上让多个线程的执行更和谐，但是不能靠它保证一人一次。
					yield()方法只会给相同优先级或更高优先级的线程以运行的机会，执行yield()方法后转入就绪（ready）状态。
		D:后台线程： public final void setDaemon(boolean on):将该线程标记为守护线程或用户线程。
						当正在运行的线程都是守护线程时，Java 虚拟机退出。 该方法必须在启动线程前调用。 
						当正在运行的线程都是守护线程时，Java虚拟机退出，守护线程垂死挣扎一下。
		E:终止线程(掌握)：
			public final void stop():让线程停止，过时了，但是还可以使用。
			public void interrupt():中断线程。 把线程的状态终止，并抛出一个InterruptedException异常。
	(7)线程的生命周期(参照	线程生命周期图解.bmp)
		A:新建
		B:就绪
		C:运行
		D:阻塞
		E:死亡
	(8)电影院卖票程序的实现
		A:继承Thread类
		B:实现Runnable接口
	(9)电影院卖票程序出问题
		A:为了更符合真实的场景，加入了休眠100毫秒。
		B:卖票问题 -- CPU的每一次执行必须是一个原子性(最简单基本的)的操作。
			a:同票多次
			b:负数票
	(10)多线程安全问题的原因(也是我们以后判断一个程序是否有线程安全问题的依据)
		A:是否有多线程环境
		B:是否有共享数据
		C:是否有多条语句操作共享数据
	(11)同步解决线程安全问题
		A:同步代码块
			synchronized(对象) {
				需要被同步的代码;
			}			
			这里的锁对象可以是任意对象。
			
		B:同步方法
			把同步加在方法上。
			private synchronized void sellTicket(){}
			这里的锁对象是this
			
		C:静态同步方法
			把同步加在方法上。
			private static synchronized void sellTicket(){}
			这里的锁对象是当前类的字节码文件对象(反射再讲字节码文件对象)
		注意：
			同步可以解决安全问题的根本原因就在那个对象上。该对象如同锁的功能。
			多个线程必须是同一把锁。
	同步的好处：
		同步的出现解决了多线程的安全问题。
	同步的弊端：
		当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。
	(12)回顾以前的线程安全的类
		A:StringBuffer
		B:Vector
		C:Hashtable
		D:如何把一个线程不安全的集合类变成一个线程安全的集合类
			用Collections工具类的方法即可。
			// public static <T> List<T> synchronizedList(List<T> list)
			List<String> list1 = new ArrayList<String>();// 线程不安全
			List<String> list2 = Collections
				.synchronizedList(new ArrayList<String>()); // 线程安全
