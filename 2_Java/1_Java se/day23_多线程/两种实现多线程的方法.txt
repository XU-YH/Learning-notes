实现多线程的方式：两种
方式一：继承Thread类
	A

方式二：实现Runnable接口

/**************************************************
public class SellTicket extends Thread{
	private static int = 100;
	public void run(){
		while(true){
			System.out.println(getName() + "正在出售第" + (ticketis--) + "张票");
		}
	}	
}

public class SellTicketDemo{
	public static void main(String[] args){
		SellTicket st1 = new SellTicket();
		SellTicket st2 = new SellTicket();
		SellTicket st3 = new SellTicket();
	
		st1.setName("窗口1：");
		st2.setName("窗口2：");
		st3.setName("窗口3：");
		
		st1.start();
		st2.start();
		st2.start();
	}
}

/********************************************************
public class SellTicket2 implements Runnable{
	private int tickets = 100;
	public void run(){
		while(true){
			if(tickets > 0){
				 System.out.println(getName() + "正在出售第" + (ticketis--) + "张票");
 			}
		}
	}
}

public class SellTicketDemo{
	public static void main(String[] args){
		SellTicket2 st = new SellTicket2();
		
		Thread t1 = new Thread(st, "窗口1：");
		Thread t2 = new Thread(st, "窗口2：");
		Thread t3 = new Thread(st, "窗口3：");
		
		t1.start();
		t2.start();
		t3.start();
	}
}
//相同的票卖了多次：CPU的一次操作必须是原子性的
//出现负数：随机性和延迟导致的

/******************************************************************
解决线程安全:
	A：是否是多线程环境
	B：是否有共享数据
	C：是否有多条语句操作共享数据

同步代码块：
		synchronized(对象){
			需要同步的代码;
		}
多个线程必须是同一把锁
public class SellTicket2 implements Runnable{
	private int tickets = 100;
	private Object obj = new Object();
	public void run(){
		while(true){
			synchronized(obj){
				if(tickets > 0){
					Thread.sleep(100);
					 System.out.println(getName() + "正在出售第" + (ticketis--) + "张票");
				}
			}
			
		}
	}
}

同步方法：
		