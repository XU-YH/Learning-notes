1:递归(理解)
	(1)方法定义中调用方法本身的现象
		举例：老和尚给小和尚讲故事，我们学编程
	(2)递归的注意事项；
		A:要有出口，否则就是死递归
		B:次数不能过多，否则内存溢出
		C:构造方法不能递归使用
	(3)递归的案例：
		A:递归求阶乘
		B:兔子问题
		C:递归输出指定目录下所有指定后缀名的文件绝对路径
		D:递归删除带内容的目录(小心使用)

2:IO流(掌握)
	(1)IO用于在设备间进行数据传输的操作	
	(2)分类：
		A:流向
			输入流	读取数据
			输出流	写出数据
		B:数据类型
			字节流	
					字节输入流
					字节输出流
			字符流
					字符输入流
					字符输出流
		注意：
			a:如果我们没有明确说明按照什么分，默认按照数据类型分。
			b:除非文件用windows自带的记事本打开我们能够读懂，才采用字符流，否则建议使用字节流。
	(3)FileOutputStream写出数据
		A:操作步骤
			a:创建字节输出流对象
			b:调用write()方法
			c:释放资源
			
		B:代码体现：
			FileOutputStream fos = new FileOutputStream("fos.txt");
			
			fos.write("hello".getBytes());
			
			fos.close();
			
		C:要注意的问题?
			a:创建字节输出流对象做了几件事情?
				A:调用系统功能去创建文件
				B:创建fos对象
				C:把fos对象指向这个文件
			b:为什么要close()?
				A:让流对象变成垃圾，这样就可以被垃圾回收器回收了
				B:通知系统去释放跟该文件相关的资源
			c:如何实现数据的换行?
				写入换行符即可
					不同系统的换行符号识别是不一样的
						windows:\r\n
						linux:\n
						Mac:\r					
			d:如何实现数据的追加写入?
				用构造方法带第二个参数是true的情况即可		
					FileOutputStream fos = new FileOutputStream("fos3.txt", true);
	(4)FileInputStream读取数据
		A:操作步骤
			a:创建字节输入流对象
			b:调用read()方法
			c:释放资源
			
		B:代码体现：
			FileInputStream fis = new FileInputStream("fos.txt");
			
			//方式1
			int by = 0;
			while((by=fis.read())!=-1) {
				System.out.print((char)by);
			}
			
			//方式2
			byte[] bys = new byte[1024];
			int len = 0;
			while((len=fis.read(bys))!=-1) {
				System.out.print(new String(bys,0,len));
			}
			
			fis.close();
	(5)案例：2种实现
		A:复制文本文件
			FileInputStream fis = new FileInputStream("a.txt");
			FileOutputStream fos = new FileOutputStream("b.txt");

			// 不同的编码方式，汉字所占的字节数不同，GBK占2个字节，UTF-8占3个字节。
			int by = 0;
			while ((by = fis.read()) != -1) {
				fos.write(by);
			}
			
			byte[] bys= new byte[1024];
			int len= 0;
			while((len= fis.read(bys))!= -1) {
				fos.write(bys, 0, len);
			}

			// 释放资源
			fis.close();
			fos.close();
		B:复制图片
		C:复制视频
	(6)字节缓冲区流
		A:BufferedOutputStream -- 字节缓冲输出流
			// BufferedOutputStream(OutputStream out)
			// FileOutputStream fos = new FileOutputStream("bos.txt");
			// BufferedOutputStream bos = new BufferedOutputStream(fos);
			// 简单写法
			BufferedOutputStream bos = new BufferedOutputStream(
					new FileOutputStream("bos.txt"));
			构造方法可以指定缓冲区的大小，但是我们一般用不上，因为默认缓冲区大小就足够了。
			
			为什么不传递一个具体的文件或者文件路径，而是传递一个OutputStream对象呢?
			原因很简单，字节缓冲区流仅仅提供缓冲区，为高效而设计的。但是呢，真正的读写操作还得靠基本的流对象实现。
			
		B:BufferedInputStream -- 字节缓冲输入流
	(7)案例：4种实现
		A:复制文本文件
			// 创建字节缓冲输出流
			BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("bos.txt"));
			// 创建字节缓冲输入流
			BufferedInputStream bis = new BufferedInputStream(new FileInputStream("a.txt"));

			// 复制文件
			byte[] bys = new byte[1024];
			int len = 0;
			while ((len = bis.read(bys)) != -1) {
				bos.write(bys, 0, len);
			}

			// 释放资源
			bos.close();
			bis.close();
		B:复制图片
		C:复制视频
		
3:自学字符流
	IO流分类
		字节流：
			InputStream
				FileInputStream
				BufferedInputStream
			OutputStream
				FileOutputStream
				BufferedOutputStream
		
		字符流：
			Reader
				FileReader
				BufferedReader
			Writer
				FileWriter
				BufferedWriter