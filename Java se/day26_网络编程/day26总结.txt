1:网络编程(理解)
	(1)网络编程：用Java语言实现计算机间数据的信息传递和资源共享
	(2)网络编程模型
	(3)网络编程的三要素
		A:IP地址
			a:点分十进制
			b:IP地址的组成
			c:IP地址的分类
			d:dos命令
			e:InetAddress
		B:端口
			是应用程序的标识。范围：0-65535。其中0-1024不建议使用。
		C:协议
			UDP:数据打包,有限制,不连接,效率高,不可靠
			TCP:建立数据通道,无限制,效率低,可靠
	(3)Socket机制
		A:通信两端都应该有Socket对象
		B:所有的通信都是通过Socket间的IO进行操作的
	(4)UDP协议发送和接收数据(掌握 自己补齐代码)
		发送：
			创建UDP发送端的Socket对象
				DatagramSocket dsReceive = new DatagramSocket(12345);
			创建数据并把数据打包
				byte[] bys = line.getBytes();
				DatagramPacket dp = new DatagramPacket(bys, bys.length, InetAddress.getByName("10.1.89.249"), 12345);
			发送数据
				ds.send(dp);
			释放资源
				ds.close();
		接收：
			创建UDP接收端的Socket对象
				DatagramSocket ds = new DatagramSocket();

			创建数据包用于接收数据
				byte[] bys = new byte[1024];
				DatagramPacket dp = new DatagramPacket(bys, bys.length);
			接收数据
				ds.receive(dp);
			解析数据包
				String ip = dp.getAddress().getHostAddress();
				String s = new String(dp.getData(), 0, dp.getLength());
				System.out.println("from" + ip + ":" + s);
			释放资源
				ds.close();
	(5)TCP协议发送和接收数据(掌握 自己补齐代码)
		发送：
			创建TCP客户端的Socket对象
				Socket s = new Socket("192.168.12.92", 11111);
			获取输出流，写数据
				s.getOutputStream()
				//Socket提供了一个终止，它会通知服务器你别等了，我没有数据过来了
				s.shutdownOutput();
			释放资源
			
		接收：
			创建TCP服务器端的Socket对象
				ServerSocket ss = new ServerSocket(11111);
			监听客户端连接
				Socket s = ss.accept();// 阻塞
			获取输入流，读取数据
				s.getInputStream()
			释放资源
	(6)案例：
		A:UDP
			a:最基本的UDP协议发送和接收数据
			b:把发送数据改进为键盘录入
			c:一个简易聊天小程序并用多线程改进
		B:TCP
			a:最基本的TCP协议发送和接收数据
			b:服务器给出反馈
			c:客户端键盘录入服务器控制台输出
			d:客户端键盘录入服务器写到文本文件
			e:客户端读取文本文件服务器控制台输出
			f:客户端读取文本文件服务器写到文本文件
			g:上传图片
			h:多线程改进上传文件