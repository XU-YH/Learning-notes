1:字符流(掌握)
	(1)字节流操作中文数据不是特别的方便，所以就出现了转换流。
	   转换流的作用就是把字节流转换字符流来使用。
	(2)转换流其实是一个字符流
		字符流 = 字节流 + 编码表
	(3)编码表
		A:就是由字符和对应的数值组成的一张表
		B:常见的编码表
			ASCII
			ISO-8859-1
			GB2312
			GBK
			GB18030
			UTF-8
		C:字符串中的编码问题
			编码
				String -- byte[]
					byte[] bys = s.getBytes("UTF-8");
			解码
				byte[] -- String
					String ss = new String(bys, "UTF-8");
	(4)IO流中的编码问题
		A:OutputStreamWriter
			OutputStreamWriter(OutputStream os):默认编码，GBK
			OutputStreamWriter(OutputStream os,String charsetName):指定编码。
		B:InputStreamReader
			InputStreamReader(InputStream is):默认编码，GBK
			InputStreamReader(InputStream is,String charsetName):指定编码
		C:编码问题其实很简单
			编码只要一致即可
	(5)字符流
		Reader
			|--InputStreamReader
				InputStreamReader isr = new InputStreamReader(new FileInputStream("a.txt");
				InputStreamReader的方法：
				 * int read():				一次读取一个字符
				 * int read(char[] chs):	一次读取一个字符数组
				
				|--FileReader
					FileReader fr = new FileReader("a.txt");
					由于我们常见的操作都是使用本地默认编码，所以，不用指定编码。
					而FileOutputStream(转换流)的名称有点长，所以，Java就提供了其子类供我们使用，指定编码为默认编码。
					OutputStreamWriter = FileOutputStream + 编码表(GBK)
					FileWriter = FileOutputStream + 编码表(GBK)	
			|--BufferedReader
				BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("a.txt")));
				BufferedReader br = new BufferedReader(new FileReader("a.txt"));
				方法：
					public String readLine()：一次读取一行数据
					包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null
		Writer
			|--OutputStreamWriter				
				OutputStreamWriter的方法：
				 * public void write(int c):						写一个字符
				 * public void write(char[] cbuf):					写一个字符数组
				 * public void write(char[] cbuf,int off,int len):	写一个字符数组的一部分
				 * public void write(String str):					写一个字符串
				 * public void write(String str,int off,int len):	写一个字符串的一部分
				 
				|--FileWriter
					FileReader = FileInputStream + 编码表(GBK)
			|--BufferedWriter
				方法：
					public void newLine():根据系统来决定换行符

	(6)面试题：close()和flush()的区别?
		字符输入流write()方法，写入数据不直接写入文件，而是写入缓冲区中，写入完成后需要刷新缓冲区，调用flush()或者close()。
		A:close()关闭流对象，但是先刷新一次缓冲区。关闭之后，流对象不可以继续再使用了。
		B:flush()仅仅刷新缓冲区,刷新之后，流对象还可以继续使用。
	(7)复制文本文件(5种方式)
		BufferedReader br = new BufferedReader(new FileReader("folder\\a.txt"));
		BufferedWriter bw = new BufferedWriter(new FileWriter("folder\\e.txt"));
		
		String line = null;
		while ((line = br.readLine()) != null) {
			bw.write(line);
			bw.newLine();
			bw.flush();
		}

		br.close();
		bw.close();

2:IO流小结(掌握)
	IO流
		|--字节流
			|--字节输入流
				InputStream
					int read():一次读取一个字节
					int read(byte[] bys):一次读取一个字节数组
				
					|--FileInputStream
					|--BufferedInputStream
			|--字节输出流
				OutputStream
					void write(int by):一次写一个字节
					void write(byte[] bys,int index,int len):一次写一个字节数组的一部分
					
					|--FileOutputStream
					|--BufferedOutputStream
		|--字符流
			|--字符输入流
				Reader
					int read():一次读取一个字符
					int read(char[] chs):一次读取一个字符数组
					
					|--InputStreamReader
						|--FileReader
					|--BufferedReader
						String readLine():一次读取一行字符串
			|--字符输出流
				Writer
					void write(int ch):一次写一个字符
					void write(char[] chs,int index,int len):一次写一个字符数组的一部分
					
					|--OutputStreamWriter
						|--FileWriter
					|--BufferedWriter
						void newLine():写一个换行符
						
						void write(String line):一次写一个字符串

3:案例(理解 练习一遍)
	A:复制文本文件 5种方式(掌握)
	B:复制图片(二进制流数据) 4种方式(掌握)
	C:把集合中的数据存储到文本文件
	D:把文本文件中的数据读取到集合并遍历集合
	E:复制单级文件夹
	F:复制单级文件夹中指定的文件并修改名称
		回顾一下批量修改名称
	G:复制多级文件夹
	H:键盘录入学生信息按照总分从高到低存储到文本文件
	I:把某个文件中的字符串排序后输出到另一个文本文件中
	J:用Reader模拟BufferedReader的特有功能
	K:模拟LineNumberReader的特有功能
		public int getLineNumber()：获得当前行号，从0开始。 
		ublic void setLineNumber(int lineNumber)：设置行号。