1:异常(理解)
	(1)程序出现的不正常的情况。
	(2)异常的体系
		Throwable
			|--Error	严重问题，我们不处理。
			|--Exception
				|--RuntimeException	运行期异常，我们需要修正代码
				|--非RuntimeException 编译期异常，必须处理的，否则程序编译不通过
	(3)异常的处理：
		A:JVM的默认处理
			把异常的名称,原因,位置等信息输出在控制台，但是呢程序不能继续执行了。
		B:自己处理
			a:try...catch...finally
				自己编写处理代码,后面的程序可以继续执行
				一旦try里面出现问题,就会在这里把问题抛出去(不会继续走下去),
				然后和catch里面的异常名进行匹配,一旦匹配成功,就执行catch内的语句,结束。
				try{
					...
				}catch(异常类名 变量名) {
					...
				}
				catch(异常类名 变量名) {
					...
				}
				...
				注意事项：
					1:能明确的尽量明确，不要用大的来处理。
					2:平级关系的异常谁前谁后无所谓，如果出现了子父关系，父必须在后面。
				try{
				}catch(异常名1 | 异常名2 | ...  变量 ) {
				...
				}
				注意：这个方法虽然简洁，但是也不够好。
					A:处理方式是一致的。(实际开发中，好多时候可能就是针对同类型的问题，给出同一个处理)
					B:多个异常间必须是平级关系。
				
			b:throws
				把自己处理不了的，在方法上声明，告诉调用者，这里有问题
				注意：
					尽量不要在main方法上抛出异常。
					但是我讲课为了方便我就这样做了。
					小结：
					编译期异常抛出，将来调用者必须处理。
					运行期异常抛出，将来调用可以不用处理。
			c:throw
				方法体中运行期异常抛出，方法名上不需要抛出
	(4)异常中要了解的几个方法：
		public String getMessage():异常的消息字符串		
		public String toString():返回异常的简单信息描述
			此对象的类的 name(全路径名)
			": "（冒号和一个空格） 
			调用此对象 getLocalizedMessage()方法的结果 (默认返回的是getMessage()的内容)
		printStackTrace() 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。把信息输出在控制台。
		
			// getMessage()
			// System.out.println(e.getMessage());
			// Unparseable date: "2014-11-20"

			// toString()
			 System.out.println(e.toString());
			// java.text.ParseException: Unparseable date: "2014-11-20"
			
			e.printStackTrace();
			
	(5)面试题
		A:编译期异常和运行期异常的区别?
			编译期异常 必须要处理的，否则编译不通过
			运行期异常 可以不处理，也可以处理
		B:throw和throws是的区别
			throw:
				在方法体中,后面跟的是异常对象名,并且只能是一个
				throw抛出的是一个异常对象，说明这里肯定有一个异常产生了
			throws:
				在方法声明上,后面跟的是异常的类名,可以是多个
				throws是声明方法有异常，是一种可能性，这个异常并不一定会产生
	(6)finally关键字及其面试题
		A:finally用于释放资源，它的代码永远会执行。特殊情况：在执行到finally之前jvm退出了
		B:面试题
			a:final,finally,finalize的区别?
				final：最终的意思，可以修饰类，成员变量，成员方法
					修饰类，类不能被继承
					修饰变量，变量是常量
					修饰方法，方法不能被重写
				finally：是异常处理的一部分，用于释放资源。
					一般来说，代码肯定会执行，特殊情况：在执行到finally之前jvm退出了
				finalize：是Object类的一个方法，用于垃圾回收
			b:如果在catch里面有return,请问finally还执行吗?如果执行,在return前还是后
				会，前。				
				实际上在中间。
				int a = 10;
				try {
					System.out.println(a / 0);
					a = 20;
				} catch (ArithmeticException e) {
					a = 30;
					return a;
					/*
					 * return a在程序执行到这一步的时候，这里不是return a而是return 30;这个返回路径就形成了。
					 * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40
					 * 再次回到以前的返回路径，继续走return 30;
					 */
				} finally {
					a = 40;
					--------------return a;//如果这样结果就是40了。
				}
				return a;
		C:异常处理的变形
			try...catch...finally
			try...catch...
			try...catch...catch...
			try...catch...catch...fianlly
			try...finally
	(7)自定义异常
		继承自Exception或者RuntimeException,只需要提供无参构造和一个带参构造即可
		public class MyException extends Exception {
			public MyException() {
			}
			public MyException(String message) {
				super(message);
			}
		}
	(8)异常的注意实现
		A:父的方法有异常抛出,子的重写方法在抛出异常的时候必须要小于等于父的异常 
		B:父的方法没有异常抛出,子的重写方法不能有异常抛出
		C:父的方法抛出多个异常,子的重写方法必须比父少或者小

2:File(掌握)
	(1)IO流操作中大部分都是对文件的操作，所以Java就提供了File类供我们来操作文件
	(2)构造方法
		A:File file = new File("e:\\demo\\a.txt");//根据一个路径得到File对象
		B:File file = new File("e:\\demo","a.txt");//根据一个目录和一个子文件/目录得到File对象
		C:File file = new File("e:\\demo");
		  File file2 = new File(file,"a.txt");//根据一个父File对象和一个子文件/目录得到File对象
	(3)File类的功能(自己补齐)
		A:创建功能
			public boolean createNewFile():创建文件 如果存在这样的文件，就不创建了。要想在某个目录下创建内容，该目录首先必须存在。
			public boolean mkdir():创建文件夹 如果存在这样的文件夹，就不创建了
			public boolean mkdirs():创建文件夹,如果父文件夹不存在，会帮你创建出来
		B:删除功能
			public boolean delete()
			注意：
				A:如果你创建文件或者文件夹忘了写盘符路径，那么，默认在项目路径下。
					区分	File file = new File("AAA");	当前项目路径下
							File file2= new File("\\AAA");	盘符当前项目所在的盘符下
				B:Java中的删除不走回收站。
				C:要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹
		C:重命名功能
			public boolean renameTo(File dest)
				如果路径名相同，就是改名。
				如果路径名不同，就是改名并剪切。
		D:判断功能
			public boolean isDirectory():判断是否是目录
			public boolean isFile():判断是否是文件
			public boolean exists():判断是否存在
			public boolean canRead():判断是否可读
			public boolean canWrite():判断是否可写
			public boolean isHidden():判断是否隐藏
		E:获取功能
			public String getAbsolutePath()：获取绝对路径
			public String getPath():获取相对路径
			public String getName():获取名称
			public long length():获取长度。字节数
			public long lastModified():获取最后一次的修改时间，毫秒值
		F:高级获取功能
			public String[] list():获取指定目录下的所有文件或者文件夹的名称数组
			public File[] listFiles():获取指定目录下的所有文件或者文件夹的File数组
		G:过滤器功能
			public String[] list(FilenameFilter filter)--FilenameFilter是一个接口
			public File[] listFiles(FilenameFilter filter)
				File[] fileArray = srcFolder.listFiles(new FilenameFilter() {
					@Override
					public boolean accept(File dir, String name) {
						return new File(dir, name).isFile() && name.endsWith(".java");
					}
				});

	(4)案例：
		A:输出指定目录下指定后缀名的文件名称
			a:先获取所有的，在遍历的时候判断，再输出
			b:先判断，再获取，最后直接遍历输出即可
		B:批量修改文件名称