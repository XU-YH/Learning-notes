1:登录注册IO版本案例(掌握)
	要求，对着写一遍。
	
	cn.itcast.pojo User
	cn.itcast.dao UserDao
	cn.itcast.dao.impl UserDaoImpl(实现我不管)
	cn.itcast.game GuessNumber
	cn.itcast.test	UserTest

2:数据操作流(操作基本类型数据的流)(理解)
	(1)可以操作基本类型的数据
	(2)流对象名称	
		DataInputStream
		DataOutputStream

3:内存操作流(理解)
	(1)有些时候我们操作完毕后，未必需要产生一个文件，就可以使用内存操作流。
	(2)三种
		A:ByteArrayInputStream,ByteArrayOutputStream
		B:CharArrayReader,CharArrayWriter
		C:StringReader,StringWriter

4:打印流(掌握)
	(1)字节打印流PrintStream，字符打印流PrintWriter。
	(2)特点：
		A:只操作目的地,不操作数据源
		B:可以操作任意类型的数据
		C:如果启用了自动刷新，在调用println()方法的时候，能够换行并刷新
			println()
			其实等价于于：
				bw.write();
				bw.newLine();		
				bw.flush();
		D:可以直接操作文件
			问题：哪些流可以直接操作文件呢?
			看API，如果其构造方法能够同时接收File和String类型的参数，一般都是可以直接操作文件的
	(3)复制文本文件
		BufferedReader br = new BufferedReader(new FileReader("a.txt"));
		// 自动刷新
		PrintWriter pw = new PrintWriter(new FileWriter("b.txt"),true);
		
		String line = null;
		while((line=br.readLine())!=null) {
			pw.println(line);
		}
		
		pw.close();
		br.close();
			
5:标准输入输出流(理解)
	(1)System类下面有这样的两个字段
		in 标准输入流
		out 标准输出流
	(2)三种键盘录入方式
		A:main方法的args接收参数
		B:System.in通过BufferedReader进行包装
			InputStream is = System.in;		

			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("请输入一个字符串：");
			String line = br.readLine();
			System.out.println("你输入的是：" + line);
			line = br.readLine();
			int i = Integer.parseInt(line);

		C:Scanner
			Scanner sc = new Scanner(System.in);
	(3)输出语句的原理和如何使用字符流输出数据
		A:原理
			System.out.println("helloworld");
			
			PrintStream ps = System.out;
			ps.println("helloworld");
		B:把System.out用字符缓冲流包装一下使用
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

6:随机访问流(理解)
	RandomAccessFile类不属于流，是Object类的子类。
		RandomAccessFile raf = new RandomAccessFile("raf.txt", "rw");
		但它融合了InputStream和OutputStream的功能。
		支持对文件的随机访问读取和写入。
			public RandomAccessFile(String name,String mode)：第一个参数是文件路径，第二个参数是操作文件的模式。
				模式有四种，我们最常用的一种叫"rw",这种方式表示我既可以写数据，也可以读取数据 	
	(1)可以按照文件指针的位置写数据和读数据。
	(2)案例：
		A:写数据
			raf.writeInt(100);
			raf.writeChar('a');
			raf.writeUTF("中国");
		B:读数据
			int = raf.readInt();
		C:获取和改变文件指针的位置
			raf.getFilePointer();//获取当前指针位置
			raf.seek(4);		//改变指针位置
		

7:合并流(理解)
	(1)把多个输入流的数据写到一个输出流中。
	(2)构造方法：
		A:SequenceInputStream(InputStream s1, InputStream s2) 
		B:SequenceInputStream(Enumeration<? extends InputStream> e) 

8:序列化流(理解)
	ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("oos.txt"));
	ObjectInputStream ois = new ObjectInputStream(new FileInputStream("oos.txt"));
	oos.writeObject(对象);
	Object obj = ois.readObject();
	(1)可以把对象写入文本文件或者在网络中传输
	(2)如何实现序列化呢?
		让被序列化的对象所属类实现序列化接口Serializable。
		该接口是一个标记接口。没有功能需要实现。
	(3)注意问题：
		把数据写到文件后，在去修改类会产生一个问题。
		如何解决该问题呢?
			在类文件中，给出一个固定的序列化id值。
			而且，这样也可以解决黄色警告线问题
		使用transient关键字声明不需要序列化的成员变量
	(4)面试题：
		什么时候序列化?
			把对象按照流一样的方式存入文本文件或者在网络中传输。对象 -- 流数据(ObjectOutputStream)
		如何实现序列化?
		什么是反序列化?
			把文本文件中的流对象数据或者网络中的流对象数据还原成对象。流数据 -- 对象(ObjectInputStream)

9:Properties(理解)
	(1)是一个集合类，Hashtable的子类
	(2)特有功能
		A:public Object setProperty(String key,String value)：	添加元素
		B:public String getProperty(String key)：				获取元素
		C:public Set<String> stringPropertyNames()：			获取所有的键的集合
	(3)和IO流结合的方法
		把键值对形式的文本文件内容加载到集合中
		public void load(Reader reader)：		把文件中的数据读取到集合中
		public void load(InputStream inStream)
			注意：这个文件的数据必须是键值对形式 --- 张三=18

		把集合中的数据存储到文本文件中
		public void store(Writer writer,String comments)：把集合中的数据存储到文件
		public void store(OutputStream out,String comments)
	(4)案例：
		private static void myStore() throws IOException {
		// 创建集合对象
		Properties prop = new Properties();

		prop.setProperty("林青霞", "27");
		prop.setProperty("武鑫", "30");
		prop.setProperty("刘晓曲", "18");
		
		//public void store(Writer writer,String comments):把集合中的数据存储到文件
		Writer w = new FileWriter("name.txt");
		prop.store(w, "helloworld");
			w.close();
		}

		private static void myLoad() throws IOException {
			Properties prop = new Properties();

			// public void load(Reader reader):把文件中的数据读取到集合中
			// 注意：这个文件的数据必须是键值对形式
			Reader r = new FileReader("prop.txt");
			prop.load(r);
			r.close();

			System.out.println("prop:" + prop);
		}
			name.txt---
				#helloworld
				#Fri Jul 20 22:15:17 CST 2018
				林青霞=27
				刘晓曲=18
				武鑫=30
		A:根据给定的文件判断是否有键为"lisi"的，如果有就修改其值为100
		B:写一个程序实现控制猜数字小游戏程序不能玩超过5次

10:NIO(了解)
	(1)JDK4出现的NIO，对以前的IO操作进行了优化，提供了效率。但是大部分我们看到的还是以前的IO
	(2)JDK7的NIO的使用	
		Path:路径
		Paths:通过静态方法返回一个路径
		Files:提供了常见的功能
			复制文本文件
			把集合中的数据写到文本文件